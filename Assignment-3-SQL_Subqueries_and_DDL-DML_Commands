Assignment - 3 (SQL | Subqueries and DDL-DML Commands)

Instructions:  
There are multiple questions.
Use chinook database to answer the questions.


Questions:

    Single-Row Subqueries:

1-Write a query to find the maximum duration among the tracks. Your query should include TrackId, Name, Milliseconds.

  SELECT TrackId, Name, Milliseconds
  FROM tracks
  WHERE Milliseconds = (SELECT MAX(Milliseconds)
  FROM tracks);

2-Write a query to find the minimum duration among the tracks. Your query should include TrackId, Name, Milliseconds.
  
  SELECT TrackId, Name, Milliseconds
  FROM tracks
  WHERE Milliseconds = (SELECT MIN(Milliseconds)
  FROM tracks);

3-Write a query to find the tracks whose bytes are higher than the average of the bytes of all tracks. Your query should include TrackId, Name, Bytes, general average and should be ordered by Bytes from highest to lowest. General average is the average of all tracks. General average should repeat in every row. (Hint: You need to use two subqueries)

  SELECT TrackId, Name, Bytes, (SELECT AVG(Bytes)
  FROM tracks) general_average
  FROM tracks
  WHERE Bytes > (SELECT AVG(Bytes)
  FROM tracks)
  ORDER BY Bytes DESC;


   Multiple-Row Subqueries:

1-Write a query that returns the customers whose sales representatives are Jane Peacock and Margaret Park. Your query should include CustomerID, First Name and Last Name of the customers.

  SELECT CustomerId, FirstName, LastName
  FROM customers
  WHERE SupportRepId IN (SELECT EmployeeId
  FROM employees
  WHERE LastName = "Peacock" OR LastName = "Park");

2-Rewrite the subquery above using the JOIN.

  SELECT c.CustomerId, c.FirstName, c.LastName
  FROM customers c
  INNER JOIN employees e ON c.SupportRepId = e.EmployeeId
  WHERE e.LastName IN("Peacock", "Park");



   DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements

1-Create a table inside the chinook database. This table tracks the employees’ courses inside the organization. Your table should have the followings features:

               Name of the table: courses
               Columns:
                    CourseId (Primary Key)
                    CourseName (Cannot be null)
                    EmployeeId (Foreign Key - Refers to EmployeeId of employees table ) 
                    CoursePrice

  CREATE TABLE courses 
        (CourseId INT PRIMARY KEY,
        CourseName TEXT NOT NULL,
        EmployeeId INT,
        CoursePrice TEXT,
        FOREIGN KEY (EmployeeId) REFERENCES employees(EmployeeId));

2-Insert at least 5 rows into the courses table. Your EmployeeId should contain the values of the EmployeeId column on the employees table. You’re free to choose any values for other columns (CourseId, CourseName, CoursePrice)

  INSERT INTO courses (CourseId, CourseName, EmployeeId, CoursePrice)
  VALUES (1, "IT Fundamentals", 7, "400 $"),
      (2, "IT Professionals", 6, "600 $"),
      (3, "Customer Relations", 2, "250 $"),
      (4, "Effective Leadership", 1, "500 $"),
      (5, "Sales Supporting", 5, "300 $");

3-Delete the last row of your courses table.

  DELETE FROM courses 
  WHERE CourseId = 5;

4-Add a new column to your courses table named StartDate. The new column cannot be null.

  ALTER TABLE courses
  ADD StartDate TEXT NOT NULL DEFAULT '-';

5-Delete the CoursePrice column.

  --(normal çözüm - SQLite bunu desteklemiyor!!)
  ALTER TABLE courses
  DROP COLUMN CoursePrice;

  --(SQLite için çözüm)
  CREATE TABLE courses_new
        (CourseId INT PRIMARY KEY,
        CourseName TEXT NOT NULL,
        EmployeeId INT,
        StartDate TEXT NOT NULL,
        FOREIGN KEY (EmployeeId) REFERENCES employees(EmployeeId));
  INSERT INTO courses_new 
  SELECT CourseId, CourseName, EmployeeId, StartDate FROM courses;
  DROP TABLE courses;
  ALTER TABLE courses_new RENAME TO courses;

6-Delete the courses table.

  DELETE FROM courses; --delete all records from the table
  DROP TABLE courses; --remove the table from the database 
